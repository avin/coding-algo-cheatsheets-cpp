#include <stack>

// ---------------------------------------------------
// üìå –†–µ–∫—É—Ä—Å–∏—è —Å –±–∞–∑–æ–≤—ã–º —Å–ª—É—á–∞–µ–º
// ---------------------------------------------------
void recur(int n) {
    if (n == 0) return;
    recur(n - 1);
}

// ---------------------------------------------------
// üìå –ò—Ç–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å—Ç–µ–∫ (DFS)
// ---------------------------------------------------
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int v): val(v), left(nullptr), right(nullptr) {}
};

void dfs_iter(TreeNode* root) {
    if (!root) return;
    std::stack<TreeNode*> st;
    st.push(root);
    while (!st.empty()) {
        TreeNode* node = st.top();
        st.pop();
        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ node->val
        if (node->right) st.push(node->right);
        if (node->left) st.push(node->left);
    }
}

// ---------------------------------------------------
// üìå –•–≤–æ—Å—Ç–æ–≤–∞—è —Ä–µ–∫—É—Ä—Å–∏—è (–≤ C++ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
// ---------------------------------------------------
long long tailRec(int n, long long acc = 1) {
    if (n == 0) return acc;
    return tailRec(n - 1, acc * n);
}