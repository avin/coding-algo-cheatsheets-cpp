#include <vector>
#include <algorithm>
#include <numeric>
#include <iterator>
#include <iostream>
#include <unordered_set>

// ---------------------------------------------------
// üìå –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞
// ---------------------------------------------------
void example_vector() {
    // –ü—É—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä
    std::vector<int> v1;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–º (initializer_list)
    std::vector<int> v2 = {1, 2, 3, 4, 5};

    // –í–µ–∫—Ç–æ—Ä –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (0)
    std::vector<int> v3(5); // {0, 0, 0, 0, 0}

    // –í–µ–∫—Ç–æ—Ä –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    std::vector<int> v4(5, 42); // {42, 42, 42, 42, 42}

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
    std::vector<int> v5(v2); // –∫–æ–ø–∏—è v2

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ (move) –∏–∑ –¥—Ä—É–≥–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
    std::vector<int> temp = {7, 8, 9};
    std::vector<int> v6(std::move(temp)); // temp —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–æ–π

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–∏–∑ –º–∞—Å—Å–∏–≤–∞ C)
    int arr[] = {10, 11, 12, 13};
    std::vector<int> v7(std::begin(arr), std::end(arr)); // {10,11,12,13}

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–∏–∑ –¥—Ä—É–≥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Å–ø–∏—Å–∫–∞ std::list)
    std::list<int> lst = {20, 21, 22};
    std::vector<int> v8(std::begin(lst), std::end(lst)); // {20,21,22}

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ assign –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –≤–µ–∫—Ç–æ—Ä–∞
    std::vector<int> v9;
    v9.assign(3, 99);       // {99, 99, 99}
    v9.assign(v2.begin(), v2.begin() + 3); // –∫–æ–ø–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ v2: {1,2,3}

    // –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    std::vector<int> v10;
    v10.reserve(100);      // –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å –ø–æ–¥ 100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    // –ø–æ—Å–ª–µ reserve —Ä–∞–∑–º–µ—Ä –æ—Å—Ç–∞—ë—Ç—Å—è 0, –Ω–æ —ë–º–∫–æ—Å—Ç—å >= 100

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    std::vector<int> v11 = {1, 2, 3};
    v11.resize(5);         // —Ç–µ–ø–µ—Ä—å {1,2,3,0,0}
    v11.resize(2);         // —Ç–µ–ø–µ—Ä—å {1,2}

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ std::iota
    std::vector<int> v12(5);
    std::iota(v12.begin(), v12.end(), 1); // {1,2,3,4,5}
}
  
// ---------------------------------------------------
// üìå –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤–µ–∫—Ç–æ—Ä—É
// ---------------------------------------------------
void example_iteration(const std::vector<int>& arr) {
    for (size_t i = 0; i < arr.size(); ++i)
        std::cout << arr[i] << std::endl;

    for (const auto& x : arr)
        std::cout << x << std::endl;

    std::for_each(arr.begin(), arr.end(), [](int x) {
        std::cout << x << std::endl;
    });
}

// ---------------------------------------------------
// üìå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
// ---------------------------------------------------
std::vector<int> example_filter(const std::vector<int>& arr) {
    std::vector<int> filtered;
    std::copy_if(arr.begin(), arr.end(), std::back_inserter(filtered),
                 [](int x) { return x > 0; });
    return filtered;
}

// ---------------------------------------------------
// üìå –ü–æ–∏—Å–∫ –∏ —É—Å–ª–æ–≤–∏—è
// ---------------------------------------------------
void example_find(const std::vector<int>& arr) {
    auto it = std::find(arr.begin(), arr.end(), 1);
    int index = (it != arr.end()) ? static_cast<int>(std::distance(arr.begin(), it)) : -1;
    bool hasValue = (it != arr.end());
    bool any = std::any_of(arr.begin(), arr.end(), [](int x) { return x > 10; });
    bool all = std::all_of(arr.begin(), arr.end(), [](int x) { return x > 0; });
}

// ---------------------------------------------------
// üìå Map-–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
// ---------------------------------------------------
std::vector<int> example_map(const std::vector<int>& arr) {
    std::vector<int> mapped;
    mapped.reserve(arr.size());
    std::transform(arr.begin(), arr.end(), std::back_inserter(mapped),
                   [](int x) { return x * 2; });
    return mapped;
}

// ---------------------------------------------------
// üìå Reduce / fold
// ---------------------------------------------------
int example_reduce(const std::vector<int>& arr) {
    return std::accumulate(arr.begin(), arr.end(), 0,
                           [](int acc, int x) { return acc + x; });
}

// ---------------------------------------------------
// üìå –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–Ω–µ –º—É—Ç–∏—Ä—É—è –æ—Ä–∏–≥–∏–Ω–∞–ª)
// ---------------------------------------------------
std::vector<int> example_sort(const std::vector<int>& arr) {
    std::vector<int> sorted = arr;
    std::sort(sorted.begin(), sorted.end());
    return sorted;
}

// ---------------------------------------------------
// üìå –ú–∏–Ω–∏–º—É–º / –º–∞–∫—Å–∏–º—É–º
// ---------------------------------------------------
void example_min_max(const std::vector<int>& arr) {
    if (!arr.empty()) {
        int minVal = *std::min_element(arr.begin(), arr.end());
        int maxVal = *std::max_element(arr.begin(), arr.end());
    }
}

// ---------------------------------------------------
// üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
// ---------------------------------------------------
size_t example_count(const std::vector<int>& arr) {
    return arr.size();
}

// ---------------------------------------------------
// üìå –°—Ä–µ–∑—ã (subvector)
// ---------------------------------------------------
std::vector<int> example_slice(const std::vector<int>& arr) {
    std::vector<int> firstTwo(arr.begin(), arr.begin() + std::min(arr.size(), size_t(2)));
    std::vector<int> rest(arr.begin() + std::min(arr.size(), size_t(2)), arr.end());
    return rest;
}

// ---------------------------------------------------
// üìå –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤
// ---------------------------------------------------
std::vector<int> example_combine(const std::vector<int>& arr1, const std::vector<int>& arr2) {
    std::vector<int> combined = arr1;
    combined.insert(combined.end(), arr2.begin(), arr2.end());
    return combined;
}

// ---------------------------------------------------
// üìå –†–∞–∑–≤–æ—Ä–æ—Ç –≤–µ–∫—Ç–æ—Ä–∞ (–±–µ–∑ –º—É—Ç–∞—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ)
// ---------------------------------------------------
std::vector<int> example_reverse(const std::vector<int>& arr) {
    std::vector<int> reversed = arr;
    std::reverse(reversed.begin(), reversed.end());
    return reversed;
}

// ---------------------------------------------------
// üìå –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É (–∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ)
// ---------------------------------------------------
std::vector<int> example_remove_by_index(const std::vector<int>& arr, size_t indexToRemove) {
    std::vector<int> result;
    result.reserve(arr.size());
    for (size_t i = 0; i < arr.size(); ++i) {
        if (i != indexToRemove) result.push_back(arr[i]);
    }
    return result;
}

// ---------------------------------------------------
// üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
// ---------------------------------------------------
void example_add_elements(std::vector<int>& arr) {
    arr.insert(arr.begin(), 0); // –≤ –Ω–∞—á–∞–ª–æ
    arr.push_back(99);          // –≤ –∫–æ–Ω–µ—Ü
}

// ---------------------------------------------------
// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
// ---------------------------------------------------
bool example_is_empty(const std::vector<int>& arr) {
    return arr.empty();
}

// ---------------------------------------------------
// üìå –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
// ---------------------------------------------------
std::vector<int> example_dedup(const std::vector<int>& arr) {
    std::unordered_set<int> s(arr.begin(), arr.end());
    std::vector<int> unique(s.begin(), s.end());
    return unique;
}

// ---------------------------------------------------
// üìå –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Å–ª–æ–≤–∏—é (std::partition)
// ---------------------------------------------------
std::vector<int> example_partition(const std::vector<int>& arr) {
    std::vector<int> part = arr;
    std::partition(part.begin(), part.end(), [](int x) { return x % 2 == 0; });
    return part;
}

// ---------------------------------------------------
// üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (std::iota)
// ---------------------------------------------------
void example_generate(std::vector<int>& arr) {
    std::iota(arr.begin(), arr.end(), 1); // –∑–∞–ø–æ–ª–Ω—è–µ—Ç 1,2,3,...
}

// ---------------------------------------------------
// üìå –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —É—Å–ª–æ–≤–∏—é (std::remove_if)
// ---------------------------------------------------
std::vector<int> example_remove_if(const std::vector<int>& arr) {
    std::vector<int> result = arr;
    result.erase(std::remove_if(result.begin(), result.end(), [](int x) { return x < 0; }), result.end());
    return result;
}

// ---------------------------------------------------
// üìå –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ (std::accumulate —Å –ª—è–º–±–¥–∞–º–∏)
// ---------------------------------------------------
int example_accumulate_custom(const std::vector<int>& arr) {
    return std::accumulate(arr.begin(), arr.end(), 1, [](int acc, int x) { return acc * x; }); // –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
}