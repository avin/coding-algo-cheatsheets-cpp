#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <functional>
#include <string>

// ---------------------------------------------------
// üìå –û—á–µ—Ä–µ–¥—å (FIFO)
// ---------------------------------------------------
void example_queue() {
    int x = 5;
    std::queue<int> q;
    q.push(x);       // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    q.pop();         // —É–¥–∞–ª–µ–Ω–∏–µ
}

// ---------------------------------------------------
// üìå –°—Ç–µ–∫ (LIFO)
// ---------------------------------------------------
void example_stack() {
    int x = 5;
    std::stack<int> st;
    st.push(x);      // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    st.pop();        // —É–¥–∞–ª–µ–Ω–∏–µ
}

// ---------------------------------------------------
// üìå –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å (Deque)
// ---------------------------------------------------
void example_deque() {
    int x = 5, y = 3;
    std::deque<int> dq;
    dq.push_back(x);    // –≤ –∫–æ–Ω–µ—Ü
    dq.push_front(y);   // –≤ –Ω–∞—á–∞–ª–æ
    dq.pop_back();      // —Å –∫–æ–Ω—Ü–∞
    dq.pop_front();     // —Å –Ω–∞—á–∞–ª–∞
}

// ---------------------------------------------------
// üìå –°–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ (—Ä—É—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
// ---------------------------------------------------
struct Node {
    int val;
    Node* next;
    Node(int v): val(v), next(nullptr) {}
};

void example_linked_list() {
    Node* head = new Node(1);
    head->next = new Node(2);
    delete head->next;
    delete head;
}

// ---------------------------------------------------
// üìå –ú–Ω–æ–∂–µ—Å—Ç–≤–æ (set)
// ---------------------------------------------------
void example_set() {
    std::set<int> s = {1, 2};
    s.insert(3);
    s.erase(2);
    bool has = s.count(1) > 0;
}

// ---------------------------------------------------
// üìå –•—ç—à-—Ç–∞–±–ª–∏—Ü–∞ / —Å–ª–æ–≤–∞—Ä—å (unordered_map)
// ---------------------------------------------------
void example_map() {
    std::unordered_map<std::string, int> mp;
    mp["key"] = 123;
    int value = mp["key"];
    bool hasKey = mp.find("key") != mp.end();
    mp.erase("key");
}

// ---------------------------------------------------
// üìå –ö—É—á–∞ (MinHeap)
// ---------------------------------------------------
void example_min_heap() {
    std::priority_queue<int, std::vector<int>, std::greater<int>> minHeap;
    minHeap.push(5);           // –≤—Å—Ç–∞–≤–∫–∞
    int minVal = minHeap.top(); // –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞
    minHeap.pop();             // —É–¥–∞–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞
}

// ---------------------------------------------------
// üìå –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (–Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–µ–∫—Ç–æ—Ä–µ)
// ---------------------------------------------------
int binarySearch(const std::vector<int>& arr, int target) {
    int l = 0, r = static_cast<int>(arr.size()) - 1;
    while (l <= r) {
        int mid = l + (r - l) / 2;
        if (arr[mid] == target) return mid;
        else if (arr[mid] < target) l = mid + 1;
        else r = mid - 1;
    }
    return -1;
}

// ---------------------------------------------------
// üìå –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ ‚Äî DFS (—Å—Ç–µ–∫) / BFS (–æ—á–µ—Ä–µ–¥—å)
// ---------------------------------------------------
struct GraphNode {
    int val;
    std::vector<GraphNode*> neighbors;
    GraphNode(int v): val(v) {}
};

void dfs(GraphNode* root) {
    if (!root) return;
    std::stack<GraphNode*> st;
    std::unordered_set<GraphNode*> visited;
    st.push(root);
    while (!st.empty()) {
        GraphNode* node = st.top();
        st.pop();
        if (visited.count(node)) continue;
        visited.insert(node);
        for (GraphNode* neighbor : node->neighbors) {
            st.push(neighbor);
        }
    }
}

void bfs(GraphNode* root) {
    if (!root) return;
    std::queue<GraphNode*> q;
    std::unordered_set<GraphNode*> visited;
    q.push(root);
    while (!q.empty()) {
        GraphNode* node = q.front();
        q.pop();
        if (visited.count(node)) continue;
        visited.insert(node);
        for (GraphNode* neighbor : node->neighbors) {
            q.push(neighbor);
        }
    }
}