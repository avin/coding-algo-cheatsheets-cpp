#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <unordered_set>
#include <unordered_map>
#include <forward_list>
#include <algorithm>
#include <functional>

// ---------------------------------------------------
// üìå –û—á–µ—Ä–µ–¥—å (FIFO)
// ---------------------------------------------------
void example_queue() {
    int x = 5;
    std::queue<int> q;
    q.push(x);       // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    q.pop();         // —É–¥–∞–ª–µ–Ω–∏–µ
}

// ---------------------------------------------------
// üìå –°—Ç–µ–∫ (LIFO)
// ---------------------------------------------------
void example_stack() {
    int x = 5;
    std::stack<int> st;
    st.push(x);      // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    st.pop();        // —É–¥–∞–ª–µ–Ω–∏–µ
}

// ---------------------------------------------------
// üìå –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å (Deque)
// ---------------------------------------------------
void example_deque() {
    int x = 5, y = 3;
    std::deque<int> dq;
    dq.push_back(x);    // –≤ –∫–æ–Ω–µ—Ü
    dq.push_front(y);   // –≤ –Ω–∞—á–∞–ª–æ
    dq.pop_back();      // —Å –∫–æ–Ω—Ü–∞
    dq.pop_front();     // —Å –Ω–∞—á–∞–ª–∞
}

// ---------------------------------------------------
// üìå –û–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ (std::forward_list)
// ---------------------------------------------------
void example_forward_list() {
    std::forward_list<int> fl = {1, 2, 3};
    fl.push_front(0);      // –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ
    fl.pop_front();        // —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    // –æ–±—Ö–æ–¥:
    for (int v : fl) {
        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ v
    }
}

// ---------------------------------------------------
// üìå –î–≤—É—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ (std::list)
// ---------------------------------------------------
#include <list>
void example_list() {
    std::list<int> lst = {1, 2};
    lst.push_back(3);     // –≤ –∫–æ–Ω–µ—Ü
    lst.push_front(0);    // –≤ –Ω–∞—á–∞–ª–æ
    lst.pop_back();       // —É–¥–∞–ª–∏—Ç—å —Å –∫–æ–Ω—Ü–∞
    lst.pop_front();      // —É–¥–∞–ª–∏—Ç—å —Å –Ω–∞—á–∞–ª–∞
    // —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:
    lst.remove(2);
    // –æ–±—Ö–æ–¥:
    for (int v : lst) {
        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ v
    }
}

// ---------------------------------------------------
// üìå –ú–Ω–æ–∂–µ—Å—Ç–≤–æ (std::set, std::unordered_set)
// ---------------------------------------------------
void example_set() {
    std::set<int> ordered = {1, 2};
    ordered.insert(3);
    ordered.erase(2);
    bool hasO = ordered.count(1) > 0;

    std::unordered_set<int> unordered = {1, 2};
    unordered.insert(3);
    unordered.erase(2);
    bool hasU = unordered.find(1) != unordered.end();
}

// ---------------------------------------------------
// üìå –°–ª–æ–≤–∞—Ä—å / —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–∞ (std::map, std::unordered_map)
// ---------------------------------------------------
#include <map>
void example_map() {
    std::map<std::string, int> ordered_map;
    ordered_map["key"] = 123;
    bool hasKeyO = ordered_map.find("key") != ordered_map.end();
    ordered_map.erase("key");

    std::unordered_map<std::string, int> unordered_map;
    unordered_map["key"] = 456;
    bool hasKeyU = unordered_map.find("key") != unordered_map.end();
    unordered_map.erase("key");
}

// ---------------------------------------------------
// üìå –ö—É—á–∞ (heap) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º std::make_heap, push_heap, pop_heap
// ---------------------------------------------------
void example_heap_manual() {
    std::vector<int> heap = {3, 1, 4, 1, 5};
    std::make_heap(heap.begin(), heap.end(), std::greater<>()); // min-heap
    heap.push_back(2);
    std::push_heap(heap.begin(), heap.end(), std::greater<>());
    std::pop_heap(heap.begin(), heap.end(), std::greater<>());
    heap.pop_back();
}

// ---------------------------------------------------
// üìå –ö—É—á–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å) (MinHeap / MaxHeap)
// ---------------------------------------------------
void example_priority_queue() {
    std::priority_queue<int> maxHeap;
    maxHeap.push(5);
    int maxVal = maxHeap.top();
    maxHeap.pop();

    std::priority_queue<int, std::vector<int>, std::greater<>> minHeap;
    minHeap.push(5);
    int minVal = minHeap.top();
    minHeap.pop();
}

// ---------------------------------------------------
// üìå –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (std::binary_search, std::lower_bound)
// ---------------------------------------------------
#include <iterator>
bool example_binary_search(const std::vector<int>& arr, int target) {
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è
    return std::binary_search(arr.begin(), arr.end(), target);
}
int example_lower_bound(const std::vector<int>& arr, int target) {
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∞—á–µ -1
    auto it = std::lower_bound(arr.begin(), arr.end(), target);
    if (it != arr.end() && *it == target) {
        return static_cast<int>(std::distance(arr.begin(), it));
    }
    return -1;
}

// ---------------------------------------------------
// üìå –û–±—Ö–æ–¥ –≥—Ä–∞—Ñ–∞ ‚Äî DFS (—Å—Ç–µ–∫) / BFS (–æ—á–µ—Ä–µ–¥—å) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏
// ---------------------------------------------------
void dfs_adj_list(const std::vector<std::vector<int>>& adj, int start) {
    std::vector<bool> visited(adj.size(), false);
    std::stack<int> st;
    st.push(start);
    while (!st.empty()) {
        int u = st.top();
        st.pop();
        if (visited[u]) continue;
        visited[u] = true;
        for (int v : adj[u]) {
            if (!visited[v]) st.push(v);
        }
    }
}

void bfs_adj_list(const std::vector<std::vector<int>>& adj, int start) {
    std::vector<bool> visited(adj.size(), false);
    std::queue<int> q;
    q.push(start);
    visited[start] = true;
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (int v : adj[u]) {
            if (!visited[v]) {
                visited[v] = true;
                q.push(v);
            }
        }
    }
}

// ---------------------------------------------------
// üìå –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π DFS
// ---------------------------------------------------
void dfs_recursive(const std::vector<std::vector<int>>& adj, int u, std::vector<bool>& visited) {
    visited[u] = true;
    for (int v : adj[u]) {
        if (!visited[v]) dfs_recursive(adj, v, visited);
    }
}