#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
#include <vector>
#include <algorithm>
#include <iterator>
#include <iostream>

// ---------------------------------------------------
// üìå –°–æ–∑–¥–∞–Ω–∏–µ std::set –∏ std::unordered_set
// ---------------------------------------------------
void example_sets() {
    std::set<int> ordered = {1, 2, 3};
    std::unordered_set<int> unordered = {1, 2, 3};
}

// ---------------------------------------------------
// üìå –°–æ–∑–¥–∞–Ω–∏–µ std::map –∏ std::unordered_map
// ---------------------------------------------------
void example_maps() {
    std::map<std::string, int> ordered_map;
    std::unordered_map<std::string, int> unordered_map;
}

// ---------------------------------------------------
// üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ / —É–¥–∞–ª–µ–Ω–∏–µ
// ---------------------------------------------------
void example_insert_erase() {
    std::set<int> s = {1, 2, 3};
    s.insert(4);
    s.erase(2);

    std::map<std::string, int> m;
    m["a"] = 1;
    m.erase("a");
}

// ---------------------------------------------------
// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è
// ---------------------------------------------------
void example_has() {
    std::set<int> s = {1, 2, 3};
    bool has1 = s.count(1) > 0;

    std::unordered_map<std::string, int> um = {{"a",1}};
    bool hasA = um.find("a") != um.end();
}

// ---------------------------------------------------
// üìå –ò—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
// ---------------------------------------------------
void example_iteration() {
    std::set<int> s = {1, 2, 3};
    for (int val : s) std::cout << val << std::endl;

    std::map<std::string, int> m = { {"k1", 1}, {"k2", 2} };
    for (const auto& kv : m) std::cout << kv.first << " => " << kv.second << std::endl;
}

// ---------------------------------------------------
// üìå –°—á—ë—Ç—á–∏–∫ —á–∞—Å—Ç–æ—Ç (std::unordered_map) –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é (std::vector + std::sort)
// ---------------------------------------------------
void example_freq(const std::vector<int>& data) {
    std::unordered_map<int, int> freq;
    for (int x : data) {
        ++freq[x];
    }
    std::vector<std::pair<int,int>> vec(freq.begin(), freq.end());
    std::sort(vec.begin(), vec.end(), [](const auto& a, const auto& b) {
        return a.second < b.second;
    });
}

// ---------------------------------------------------
// üìå –ú–Ω–æ–∂–µ—Å—Ç–≤–∞: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ, —Ä–∞–∑–Ω–æ—Å—Ç—å (std::set)
// ---------------------------------------------------
void example_set_operations(const std::set<int>& a, const std::set<int>& b) {
    std::set<int> uni;
    std::set_union(a.begin(), a.end(), b.begin(), b.end(), std::inserter(uni, uni.begin()));

    std::set<int> inter;
    std::set_intersection(a.begin(), a.end(), b.begin(), b.end(), std::inserter(inter, inter.begin()));

    std::set<int> diff;
    std::set_difference(a.begin(), a.end(), b.begin(), b.end(), std::inserter(diff, diff.begin()));
}

// ---------------------------------------------------
// üìå –ú—É–ª—å—Ç–∏-–º–Ω–æ–∂–µ—Å—Ç–≤–æ (std::multiset) –∏ –º—É–ª—å—Ç–∏–º–∞–ø–∞ (std::multimap)
// ---------------------------------------------------
void example_multiset_multimap() {
    std::multiset<int> ms = {1, 2, 2, 3};
    ms.insert(2);
    ms.erase(2); // —É–¥–∞–ª–∏—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ–¥–Ω–æ? erase(2) —É–¥–∞–ª–∏—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 2

    std::multimap<std::string, int> mm;
    mm.emplace("a", 1);
    mm.emplace("a", 2);
    auto range = mm.equal_range("a");
    for (auto it = range.first; it != range.second; ++it) {
        std::cout << it->first << " => " << it->second << std::endl;
    }
}