#include <string>
#include <vector>
#include <algorithm>
#include <regex>
#include <iostream>
#include <sstream>

// ---------------------------------------------------
// üìå –°—Ç—Ä–æ–∫–∞ -> –≤–µ–∫—Ç–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ–±—Ä–∞—Ç–Ω–æ
// ---------------------------------------------------
void example_split_join(const std::string& str) {
    std::vector<char> arr(str.begin(), str.end());
    std::string str2(arr.begin(), arr.end());
    std::vector<std::string> chars;
    chars.reserve(str.size());
    for (char c : str) chars.push_back(std::string(1, c));
}

// ---------------------------------------------------
// üìå –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
// ---------------------------------------------------
void example_find_substring(const std::string& str) {
    bool contains = str.find("abc") != std::string::npos;
    size_t pos = str.find("abc");
}

// ---------------------------------------------------
// üìå –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
// ---------------------------------------------------
void example_compare(std::string s1, std::string s2) {
    bool equal = (s1 == s2);
    std::transform(s1.begin(), s1.end(), s1.begin(), ::tolower);
    std::transform(s2.begin(), s2.end(), s2.begin(), ::tolower);
    bool equalIgnoreCase = (s1 == s2);
}

// ---------------------------------------------------
// üìå –°–ª–∏—è–Ω–∏–µ —Å—Ç—Ä–æ–∫
// ---------------------------------------------------
void example_concat(const std::string& str1, const std::string& str2) {
    std::string merged = str1 + str2;
    // –∏–ª–∏
    std::string merged2 = str1.append(str2);
}

// ---------------------------------------------------
// üìå –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
// ---------------------------------------------------
void example_remove_char(std::string& str) {
    str.erase(std::remove(str.begin(), str.end(), 'x'), str.end());
}

// ---------------------------------------------------
// üìå –ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤ / –ø–æ–¥—Å—Ç—Ä–æ–∫
// ---------------------------------------------------
void example_replace(std::string& str) {
    std::replace(str.begin(), str.end(), 'l', 'X'); // –∑–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ 'l' –Ω–∞ 'X'
    size_t pos = str.find("ll");
    if (pos != std::string::npos) {
        str.replace(pos, 2, "XX");
    }
}

// ---------------------------------------------------
// üìå –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
// ---------------------------------------------------
void example_regex(const std::string& str) {
    std::regex re("l");
    bool found = std::regex_search(str, re);
    auto matches_begin = std::sregex_iterator(str.begin(), str.end(), re);
    auto matches_end = std::sregex_iterator();
    std::vector<std::string> matches;
    for (auto it = matches_begin; it != matches_end; ++it) {
        matches.push_back(it->str());
    }
}

// ---------------------------------------------------
// üìå –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é std::stringstream: stoi, to_string, substr, split —Å –ø–æ–º–æ—â—å—é stringstream
// ---------------------------------------------------
void example_stringstream(const std::string& str) {
    // –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
    int num;
    std::stringstream ss(str);
    ss >> num;

    // —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    std::vector<std::string> tokens;
    std::string token;
    std::istringstream iss(str);
    while (iss >> token) {
        tokens.push_back(token);
    }

    // –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
    std::string sub = str.substr(0, std::min<size_t>(str.size(), 5));

    // —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    std::string noSpaces = str;
    noSpaces.erase(std::remove(noSpaces.begin(), noSpaces.end(), ' '), noSpaces.end());
}